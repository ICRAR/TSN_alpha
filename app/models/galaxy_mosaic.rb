class GalaxyMosaic < ActiveRecord::Base
  require 'RMagick'
  attr_accessible :display, :galaxy_hash, :options
  serialize :galaxy_hash, Hash
  serialize :options, Hash
  has_attached_file :image, :styles => {:thumb => "300" }
  validates_attachment_content_type :image, :content_type => /\Aimage\/.*\Z/
  scope :for_show, where{display == true}
  def self.new_with_defaults
    gm = self.new
    gm.options[:cols] = 5
    gm.options[:rows] = 3
    gm
  end
  def generate_hash
    galaxies = Galaxy.completed.last(self.options[:cols] * self.options[:rows])
    g_hash = {}
    galaxies.each do |galaxy|
      g_hash[galaxy.galaxy_id] = Galaxy.parameter_image_options.sample
    end
    self.galaxy_hash = g_hash
    return g_hash
  end
  def galaxy_ids
    self.galaxy_hash.keys
  end
  def galaxies
    Galaxy.where{galaxy_id.in my{self.galaxy_ids}}
  end
  def user_ids
    ids = GalaxyUser.where{galaxy_id.in my{self.galaxy_ids}}.pluck(:userid)
    ids.uniq
  end
  def set_info
    ids = self.user_ids
    number_of_users = ids.count
    self.options[:number_of_users] = number_of_users
    info_text_line_1 = "The data in this image was generated by the work of computers donated by #{number_of_users} users!"
    info_text_line_2 = "For more information head to www.theSkyNet.org"
    self.options[:info_text_line_1] = info_text_line_1
    self.options[:info_text_line_2] = info_text_line_2
  end
  def build_image
    if self.image.exists?
      self.image = nil
      self.save
    end
    self.set_info if self.options[:info_text_line_1].nil?
    self.generate_hash if self.galaxy_hash == {}
    new_image = self.generate_mosaic_image
    tmp_img_file = Tempfile.new(['tmp_mosaic_image', '.png'])

    new_image.write(tmp_img_file.path)
    self.image = tmp_img_file

    self.save

    tmp_img_file.close
    tmp_img_file.unlink
    new_image.destroy!
  end
  def generate_galaxy_image(dim, galaxy, param)
    galaxy_image_url = galaxy.parameter_image_url(param)
    urlimage = open(galaxy_image_url)
    galaxy_image = Magick::ImageList.new.from_blob(urlimage.read)

    #scale and crop to dim
    galaxy_image.resize_to_fit!(dim)

    #add text to image
    text = "#{galaxy.name[0..15]} (#{param})"
    draw = Magick::Draw.new
    draw.fill = 'White'
    draw.font_family = 'helvetica'
    font_size = (25 * dim / 300).to_i
    draw.pointsize = font_size
    draw.gravity = Magick::SouthGravity
    draw.annotate(galaxy_image, 0,0,0,10, text) {
      self.stroke = 'black'
      self.stroke_width = 3
    }
    draw.annotate(galaxy_image, 0,0,0,10, text) {
      self.stroke = 'none'
    }
    return galaxy_image
  end
  def generate_mosaic_image(dim = 200)
    #new image
    image_list = Magick::ImageList.new
    page = Magick::Rectangle.new(0,0,0,0)

    #insert galaxy images
    count = 0
    self.galaxies.each do |galaxy|
      #load parameter image for galaxy
      puts "loading image #{count} #{galaxy.name}:"
      galaxy_image = generate_galaxy_image(dim, galaxy, self.galaxy_hash[galaxy.galaxy_id])

      #add to list
      image_list << galaxy_image.cur_image
      #update position information
      x_cor = (count % self.options[:cols]).to_i * dim
      y_cor = (count / self.options[:cols]).to_i * dim
      page.x = x_cor
      page.y = y_cor
      image_list.page = page
      count = count + 1
    end

    #add logo
    logo_file_name = Rails.root.join('app','assets','images','logo_for_mosaic.png')
    logo_image = Magick::ImageList.new(logo_file_name)
    image_list << logo_image.resize_to_fit(dim*self.options[:cols],dim)
    x_cor = 0
    y_cor = (self.options[:rows]) * dim
    page.x = x_cor
    page.y = y_cor
    image_list.page = page

    #add info text
    info_font_size = (30 * dim / 300).to_i
    info_text_image = Magick::Image.new(dim*self.options[:cols],info_font_size*4) { self.background_color = "black" }
    self.draw_font_with_outline(info_text_image,self.options[:info_text_line_1],{pointsize: info_font_size, offset: (info_font_size + 20)})
    self.draw_font_with_outline(info_text_image,self.options[:info_text_line_2],{pointsize: info_font_size, offset: 10})

    image_list << info_text_image
    x_cor = 0
    y_cor = (self.options[:rows]+1) * dim -1
    page.x = x_cor
    page.y = y_cor
    image_list.page = page

    #generate_mosaic
    mosaic = image_list.mosaic

    #add gridlines
    draw = Magick::Draw.new
    draw.stroke('grey')
    draw.stroke_width(1)
    draw.fill_opacity(0)
    #add cols
    (1..(self.options[:cols]-1)).each do |col|
      draw.line(col*dim,0,col*dim,self.options[:rows]*dim)
    end
    #add rows
    (1..(self.options[:rows])).each do |row|
      draw.line(0,row*dim,self.options[:cols]*dim,row*dim)
    end
    draw.draw(mosaic)
    mosaic.format = 'png'
    #and done
    return mosaic
  end
  def draw_font_with_outline(image,text,opts = {})
    draw = Magick::Draw.new
    draw.fill = 'White'
    draw.font_family = 'helvetica'
    draw.pointsize= 25
    draw.gravity = Magick::SouthGravity
    opts.slice(:fill,:font_family,:pointsize,:gravity).each do |k,v|
      draw.send("#{k}=",v)
    end
    offset = opts[:offset] || 10
    draw.annotate(image, 0,0,0,offset, text) {
      self.stroke = 'black'
      self.stroke_width = 3
    }
    draw.annotate(image, 0,0,0,offset, text) {
      self.stroke = 'none'
    }
  end

end
