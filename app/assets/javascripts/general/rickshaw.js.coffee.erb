#renders a graphite graph using the rickshaw and the following options
# metrics: an array of graphite metrics
# names:   an array of names for the legand
# div:     the jquery object for the div placeholder
# time:    the graphite timeframe for the graph
# colors   (optional) an array or colors to be used if none are specfied default colors are used
#
# eg:
#  name = ['Boinc','Nerues']
#  color = ['green','blue']
#  metrics = ['stats.gauges.TSN_dev.boinc.users.3121.credit','stats.gauges.TSN_dev.nereus.users.101032.credit']
#  rickshaw_graph(metrics,name,$("#chart"),'-5days',color)
#
Rickshaw.Graph.JSONP.Static = Rickshaw.Class.create(
  Rickshaw.Graph.JSONP,
    request: () ->
      $.ajax(
        url: this.dataURL,
        success: this.success.bind(this),
        error: this.error.bind(this),
        dataType: 'jsonp',
        cache: true,
        jsonpCallback: this.callback
      )
  )


TSN.rickshaw_graph = (metrics,names,div,time,colors = '') ->
  url = "<%= APP_CONFIG['graphite_url']%>render?from=#{time}&until=-6days&target=group("
  url += metrics.join(',')
  url +=")&format=json&jsonp=?"
  div.addClass('rickshaw')
  div.css('position', 'relative')
  div.append('<div id="y_axis"></div>')
  div.append('<div id="legend"></div>')
  div.append('<div id="chart"></div>')
  div.append('<div id="slider"></div>')
  remote_data = []

  #returns true of graph should be non decreasing
  check_metric_non_decreasing = (metric_target) ->
    (metric_target.indexOf(".credit") != -1) || (metric_target.indexOf(".total_credit") != -1)

  #takes the metric from graphite and loads it into richshaw
  load_metric =  (metric,i) ->
    if  check_metric_non_decreasing(metric['target'])
      last_y = 0
      for d in metric['datapoints']
        if d[0] >= last_y
          remote_data[i].data.push {x: d[1], y: d[0]}
          last_y = d[0]
        else
          remote_data[i].data.push {x: d[1], y: last_y}
    else
      last_y = 0
      for d in metric['datapoints']
        if d[0] == null
          remote_data[i].data.push {x: d[1], y: last_y}
        else
          remote_data[i].data.push {x: d[1], y: d[0]}
          last_y = d[0]

  rick_graph = new Rickshaw.Graph.JSONP.Static (
    callback: "rickshaw_callback_#{div.attr('id')}"
    element: div.find("#chart")[0]
    renderer: 'line'
    width: 600,
    height: 200
    dataURL: url
    onData: (metrics) ->

      i = 0
      colors = new Rickshaw.Color.Palette( { scheme: 'colorwheel' } ).scheme if !colors

      for metric in metrics
        remote_data.push []
        remote_data[i].data = []
        load_metric(metric,i)
        remote_data[i].name = names[i]
        remote_data[i].color = colors[i % colors.length]
        i++
      return remote_data
    onComplete: (transport) ->
      graph = transport.graph;
      detail = new Rickshaw.Graph.HoverDetail({ graph: graph })
      x_axis = new Rickshaw.Graph.Axis.Time( { graph: graph } )
      x_axis.graph.update()
      y_axis = new Rickshaw.Graph.Axis.Y (
        graph: graph,
        orientation: 'left',
        tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
        element: div.find('#y_axis')[0]

                                         )
      y_axis.graph.update()
      legend = new Rickshaw.Graph.Legend(
        graph: graph,
        element: div.find('#legend')[0]
      )
      shelving = new Rickshaw.Graph.Behavior.Series.Toggle(
        graph: graph,
        legend: legend
      )
      highlighter = new Rickshaw.Graph.Behavior.Series.Highlight(
        graph: graph,
        legend: legend
      )
      ticksTreatment = 'glow'
      order = new Rickshaw.Graph.Behavior.Series.Order(
        graph: graph,
        legend: legend
      )
      div.find("#legend span:first").click()
      slider = new Rickshaw.Graph.RangeSlider(
        graph: graph,
        element: div.find('#slider')[0]
      )

      #adds more detail for the last 7 days to the graph
      url = "<%= APP_CONFIG['graphite_url']%>render?from=-6days&until=-2hours&target=group("
      url += metrics.join(',')
      url +=")&format=json&jsonp=?"
      $.ajax
        url: url,
        dataType: 'jsonp',
        cache: true,
        jsonpCallback: "rickshaw_callback_#{div.attr('id')}_7",
        success: (metrics) ->
          i = 0
          for metric in metrics
            #remote_data.push []
            #remote_data[i].data = []
            #graph.series[i].data.push {x: d[1], y: d[0]} for d in meteric['datapoints']
            load_metric(metric,i)
            #remote_data[i].data.push {x: d[1], y: d[0]} for d in meteric['datapoints']
            i++
          graph.update()
      #adds custom zoom controls to graph
      controls = div.append($('<div>',{class:'controls'}))
      move_slider(1,'Last 24 hours',graph,div,controls)
      move_slider(7,'Last 7 days',graph,div,controls)
      move_slider(30,'Last Month',graph,div,controls)
      move_slider(365,'Last Year',graph,div,controls)

    min: 'auto'
    )
move_slider = (days,tag,graph,div,controls) ->
  div.children('.controls').append($('<a>',{
  text: tag,
  href:'#',
  click: (event) ->
    event.preventDefault()
    graph.window.xMin = $.now()/1000 - days*24*60*60
    graph.window.xMax = $.now()/1000
    if (graph.dataDomain()[0] == graph.window.xMin)
      graph.window.xMin = undefined;
    if (graph.dataDomain()[1] == graph.window.xMax)
      graph.window.xMax = undefined;
    graph.update()
    values = [graph.window.xMin,graph.window.xMax]
    div.children('#slider:first').slider('option', 'values',values)
    false
  }))