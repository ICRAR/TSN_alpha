$(document).ready(
    jQuery ->
      if (typeof Faye != "undefined" )
        window.faye = new Faye.Client("<%= APP_CONFIG['faye_protocol'] %>://<%= APP_CONFIG['faye_host']%>:<%= APP_CONFIG['faye_port']%>/faye")
        game_map_id = $('#data').data('currentPlayer').current_player.game_map_id
        window.faye.subscribe "/messages/from_rails/#{game_map_id}", (json_data) ->
          Ember.run () ->
            store = TheSkyMap.__container__.lookup('store:main')
            current_player = TheSkyMap.__container__.lookup('controller:currentPlayer')
            data = jQuery.parseJSON( json_data )
            #sends a simple alert
            if data.alert?
              alert(data.alert.msg)
            #sends a simple alert and the resets the page
            if data.request_refresh?
              alert(data.request_refresh.msg)
              location.reload(true)
            #insert or update a model in ember
            for model_name, model of data.models
              payload = {}
              payload[model_name] =  model
              store.pushPayload(model_name, payload)
            #remove a model from ember
            for model_name, model_id of data.remove_models
              local_model = store.getById(model_name,model_id)
              local_model.deleteRecord() unless local_model == null
            #request the ember store to update a model if it already exists
            for model_name, model_ids of data.update_models
              ids = []
              for model_id in model_ids
                local_model = store.getById(model_name,model_id)
                ids.push(model_id) unless local_model == null
              store.find(model_name, {ids: ids}) unless ids == []
            #request the ember store to update a model or load if the player id matchs
            current_player_id = parseInt(current_player.get('id'))
            if data.update_models_player_only?
              if current_player_id in data.update_models_player_only.player_ids
                for model_name, model_ids of data.update_models_player_only.models
                  store.find(model_name, {ids: model_ids}) unless ids == []
            #methods for new messages or ack'd messages
            #new message
            if data.new_message?
              if current_player_id == data.new_message.player_id
                msg_id = data.new_message.msg_id
                store.find('message',msg_id).then(() ->
                  #update controller
                  msg_cnt = TheSkyMap.__container__.lookup('controller:messagesIndex')
                  msg_cnt.get('model').set('content',store.all('message').content)
                  new_msg = store.getById('message',msg_id)
                  Messenger().post
                    message: new_msg.get('msg')
                    actions:
                      ack:
                        label: 'Acknowledge Message'
                        action: () ->
                          new_msg.set('ack',true)
                          new_msg.save()
                          @cancel()
                )
                current_player.set('unread_msg_count',data.new_message.new_count)
            if data.ack_msg?
              if current_player_id == data.ack_msg.player_id
                local_model = store.getById('message',data.ack_msg.msg_id)
                local_model.set('ack',true) unless local_model == null
                current_player.set('unread_msg_count',data.ack_msg.new_count)
            if data.ack_all_msgs?
              if current_player_id == data.ack_all_msgs.player_id
                local_msgs = store.all('message')
                for msg in local_msgs.content
                  msg.set('ack',true)
                current_player.set('unread_msg_count',0)
)